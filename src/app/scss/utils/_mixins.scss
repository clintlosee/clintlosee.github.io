// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Computes the height of the tilted pseudo-element based on the given angle
/// using Pythagoras Theorem.
// sin(..), pow(..) and sqrt(..)  functions come from this pen:
// http://codepen.io/HugoGiraudel/pen/rLpPGo
/// @access public
/// @author Hugo Giraudel
/// @param {Angle} $angle - the tilt angle
@function get-tilted-height($angle) {
    $a: (100% / 1%);
    $A: (90deg - $angle);
    $c: ($a / sin($A));
    $b: sqrt(pow($c, 2) - pow($a, 2));

    @return (abs($b) * 1%);
}

/*
 * Size
 * Example: @include size(100%); // returns width: 100%; height: 100%;
 * Example: @include size(100%, 1px); // returns width: 100%; height: 1px;
 */
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

/*
 * Vendor prefix
 * Example: @include prefix(transform, rotate(42deg), webkit moz ms o);
 */
@mixin prefix($property, $value, $vendors: webkit moz ms o) {
    @if $vendors {
        @each $vendor in $vendors {
            #{"-" + $vendor + "-" + $property}: #{$value};
        }
    }
    #{$property}: #{$value};
}

@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@mixin large($force: false) {
    @if $force == false {
        @media screen and (min-width: 1200px){
            @content;
        }
    }
}
@mixin desktop($force: false) {
    @if $force == false {
        @media screen and (min-width: 980px){
            @content;
        }
    }
}
@mixin tablet() {
    @media screen and (max-width: 979px), display and (-webkit-min-device-pixel-ratio: 2) and (max-width: 979px){
        @content;
    }
}
@mixin mobile($force: false) {
    @if $force == true {
        @media screen and (max-width: 767px){
            @content;
        }
    }
}

/// Apply a tilted effect by generating a pseudo-element with a diagonal
/// splitted background.
/// @access public
/// @author Hugo Giraudel
/// @param {Angle} $angle - the tilt angle
/// @param {Color} $color - the color to be used as background + gradient
/// @param {String} $position ['top'] - either `top` or `bottom`
/// @param {String} $pseudo ['before'] - either `before` or `after`
/// USAGE: 
///     .container {
///         @include tilted(3deg, rgb(255, 255, 255));
///     }
@mixin tilted($angle, $color, $position: 'top', $pseudo: 'before') {
    $height: get-tilted-height($angle);

    position: relative;
    background-color: $color;

    &::#{$pseudo} {
    content: '';
    padding-top: $height;
    position: absolute;
    left: 0;
    right: 0;

    @if ($position == 'top') {
        bottom: 100%;
        background-image: linear-gradient($angle, $color 50%, transparent 50%);
    } @else {
        top: 100%;
        background-image: linear-gradient($angle, transparent 50%, $color 50%);
    }
    }
}